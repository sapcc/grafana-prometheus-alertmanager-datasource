{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","silenced","jsonData","severityLevels","severity_critical","toLowerCase","severity_high","severity_warning","severity_info","q","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","queryString","replace","expr","scopedVars","querySilenced","parseQuery","formatDataTable","formatDataStat","labelSelector","parseLabelSelector","response","makeRequest","results","filterSilencedOnlyData","columnsDict","getColumnsDict","columns","getColumns","i","row","Array","fill","item","Object","keys","concat","label","Date","parse","silencedByID","silencedBy","getSilencedByUser","createdBy","err","console","error","annotation","rows","push","then","now","bSilenced","encodeURIComponent","datasourceRequest","method","headers","id","silencedRegex","aQueries","split","includes","r","exec","JSON","join","d","status","column","text","input","map","trim","index","labelIndex","selectedLabel","message","title","target","targetss","refId","legendFormat","labels","stringify","aliasRegex","match","g1"],"mappings":";;;;;;;;;;;;;;;AAAOA,a;;;;;;;;;;;;;;;;;;;;;yCAEMC,iB;AAEX,2CAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2D;AAAA;;AACzD,yBAAKC,IAAL,GAAYJ,iBAAiBI,IAA7B;AACA,yBAAKC,GAAL,GAAWL,iBAAiBK,GAA5B;AACA,yBAAKC,IAAL,GAAYN,iBAAiBM,IAA7B;AACA,yBAAKC,QAAL,GAAgB,OAAOP,iBAAiBQ,QAAjB,CAA0BD,QAAjC,KAA8C,WAA9C,GAA4DP,iBAAiBQ,QAAjB,CAA0BD,QAAtF,GAAiG,KAAjH;AACA,yBAAKE,cAAL,GAAsB,EAAtB;AACA,yBAAKA,cAAL,CAAoBT,iBAAiBQ,QAAjB,CAA0BE,iBAA1B,CAA4CC,WAA5C,EAApB,IAAkF,CAAlF;AACA,yBAAKF,cAAL,CAAoBT,iBAAiBQ,QAAjB,CAA0BI,aAA1B,CAAwCD,WAAxC,EAApB,IAAkF,CAAlF;AACA,yBAAKF,cAAL,CAAoBT,iBAAiBQ,QAAjB,CAA0BK,gBAA1B,CAA2CF,WAA3C,EAApB,IAAkF,CAAlF;AACA,yBAAKF,cAAL,CAAoBT,iBAAiBQ,QAAjB,CAA0BM,aAA1B,CAAwCH,WAAxC,EAApB,IAAkF,CAAlF;AACA,yBAAKI,CAAL,GAASd,EAAT;AACA,yBAAKC,UAAL,GAAkBA,UAAlB;AACA,yBAAKC,WAAL,GAAmBA,WAAnB;AACD;;;;0CAEOa,O,EAAS;AACX,4BAAIC,QAAQ,KAAKC,oBAAL,CAA0BF,OAA1B,CAAZ;AACAC,8BAAME,OAAN,GAAgBF,MAAME,OAAN,CAAcC,MAAd,CAAqB;AAAA,mCAAK,CAACC,EAAEC,IAAR;AAAA,yBAArB,CAAhB;;AAEA,4BAAIL,MAAME,OAAN,CAAcI,MAAd,IAAwB,CAA5B,EAA+B;AAC3B,mCAAO,KAAKR,CAAL,CAAOS,IAAP,CAAY,EAACC,MAAM,EAAP,EAAZ,CAAP;AACH;AACD,4BAAIC,cAAc,KAAKvB,WAAL,CAAiBwB,OAAjB,CAAyBV,MAAME,OAAN,CAAc,CAAd,EAAiBS,IAA1C,EAAgDZ,QAAQa,UAAxD,CAAlB;AACA,4BAAIC,gBAAgB,KAAKvB,QAAzB;AACA,4BAAImB,WAAJ,EAAiB;AAAA,8CACsB,KAAKK,UAAL,CAAgBL,WAAhB,CADtB;AAAA,gCACRA,WADQ,eACRA,WADQ;AAAA,gCACKI,aADL,eACKA,aADL;AAEhB;;AAED,4BAAGb,MAAME,OAAN,CAAc,CAAd,EAAiBf,IAAjB,KAA0B,OAA7B,EAAqC;AACjC;AACA,mCAAO,KAAK4B,eAAL,CAAqBf,KAArB,EAA4BS,WAA5B,EAAyCI,aAAzC,CAAP;AACH,yBAHD,MAGO;AACH,mCAAO,KAAKG,cAAL,CAAoBhB,KAApB,EAA2BS,WAA3B,EAAwCI,aAAxC,CAAP;AACH;AACJ;;;0DAEqBb,K,EAAOS,W,EAAanB,Q,EAAU;AAChD,4BAAI2B,gBAAgB,KAAKC,kBAAL,CAAwBlB,MAAME,OAAN,CAAc,CAAd,EAAiBe,aAAzC,CAApB;AACA,4BAAME,WAAW,MAAM,KAAKC,WAAL,CAAiBpB,KAAjB,EAAwBS,WAAxB,EAAqCnB,QAArC,CAAvB;AACA,4BAAI+B,UAAU;AACV,oCAAQ,CAAC;AACL,wCAAQ,EADH;AAEL,2CAAW,EAFN;AAGL,wCAAQ;AAHH,6BAAD;AADE,yBAAd;;AASA,4BAAGF,SAASX,IAAT,IAAiBW,SAASX,IAAT,CAAcA,IAA/B,IAAuCW,SAASX,IAAT,CAAcA,IAAd,CAAmBF,MAA7D,EAAqE;AACjE,gCAAIE,OAAO,KAAKc,sBAAL,CAA4BH,SAASX,IAAT,CAAcA,IAA1C,EAAgDlB,QAAhD,CAAX;AACA,gCAAIiC,cAAc,KAAKC,cAAL,CAAoBhB,IAApB,EAA0BS,aAA1B,CAAlB;AACAI,oCAAQb,IAAR,CAAa,CAAb,EAAgBiB,OAAhB,GAA0B,KAAKC,UAAL,CAAgBH,WAAhB,CAA1B;;AAEA,iCAAK,IAAII,IAAI,CAAb,EAAgBA,IAAInB,KAAKF,MAAzB,EAAiCqB,GAAjC,EAAsC;AAClC,oCAAIC,MAAM,IAAIC,KAAJ,CAAUR,QAAQb,IAAR,CAAa,CAAb,EAAgBiB,OAAhB,CAAwBnB,MAAlC,EAA0CwB,IAA1C,CAA+C,EAA/C,CAAV;AACA,oCAAIC,OAAOvB,KAAKmB,CAAL,CAAX;;AAFkC;AAAA;AAAA;;AAAA;AAIlC,yDAAkBK,OAAOC,IAAP,CAAYF,KAAK,QAAL,CAAZ,EAA4BG,MAA5B,CAAmCF,OAAOC,IAAP,CAAYF,IAAZ,CAAnC,EAAsDG,MAAtD,CAA6DF,OAAOC,IAAP,CAAYF,KAAK,QAAL,CAAZ,CAA7D,CAAlB,8HAA8G;AAAA,4CAArGI,KAAqG;;AAC1G,4CAAGA,SAASZ,WAAZ,EAAyB;AACrB,oDAAOY,KAAP;AACI,qDAAK,UAAL;AACIP,wDAAIL,YAAYY,KAAZ,CAAJ,IAA0B,KAAK3C,cAAL,CAAoBuC,KAAK,QAAL,EAAeI,KAAf,CAApB,CAA1B;AACA;AACJ,qDAAK,UAAL;AACIP,wDAAIL,YAAYY,KAAZ,CAAJ,IAA0B,CAACC,KAAKC,KAAL,CAAWN,KAAK,UAAL,CAAX,CAAD,CAA1B;AACA;AACJ,qDAAK,QAAL;AACIH,wDAAIL,YAAYY,KAAZ,CAAJ,IAA0BJ,KAAK,QAAL,CAA1B;AACA;AACJ,qDAAK,YAAL;AACI,wDAAMO,eAAeP,KAAK,QAAL,EAAe,YAAf,EAA6B,CAA7B,CAArB;AACA,wDAAIO,YAAJ,EAAkB;AACd,4DAAI;AACA,gEAAMC,aAAa,MAAM,KAAKC,iBAAL,CAAuBF,YAAvB,CAAzB;AACAV,gEAAIL,YAAYY,KAAZ,CAAJ,IAA0BI,WAAW/B,IAAX,CAAgBA,IAAhB,CAAqBiC,SAA/C,CAAyD;AAC5D,yDAHD,CAGE,OAAMC,GAAN,EAAW;AACTC,oEAAQC,KAAR,CAAcF,GAAd;AACH;AACJ;AACD;AACJ;AACId,wDAAIL,YAAYY,KAAZ,CAAJ,IAA0BJ,KAAK,QAAL,EAAeI,KAAf,CAA1B;AAtBR;AAwBH;AACJ;AA/BiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAgClC,0DAAuBH,OAAOC,IAAP,CAAYF,KAAK,aAAL,CAAZ,CAAvB,mIAAyD;AAAA,4CAAhDc,UAAgD;;AACrD,4CAAGA,cAActB,WAAjB,EAA8B;AAC1BK,gDAAIL,YAAYsB,UAAZ,CAAJ,IAA+Bd,KAAK,aAAL,EAAoBc,UAApB,CAA/B;AACH;AACJ;AApCiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqClCxB,wCAAQb,IAAR,CAAa,CAAb,EAAgBsC,IAAhB,CAAqBC,IAArB,CAA0BnB,GAA1B;AACH;AACJ;AACD,+BAAOP,OAAP;AACH;;;mDAEcrB,K,EAAOS,W,EAAanB,Q,EAAU;AAAA;;AACzC,+BAAO,KAAK8B,WAAL,CAAiBpB,KAAjB,EAAwBS,WAAxB,EAAqCnB,QAArC,EAA+C0D,IAA/C,CAAoD,oBAAY;AACnE,gCAAIxC,OAAO,MAAKc,sBAAL,CAA4BH,SAASX,IAAT,CAAcA,IAA1C,EAAgDlB,QAAhD,CAAX;AACA,mCAAO;AACH,wCAAQ,CAAC,EAAE,cAAc,CAAE,CAACkB,KAAKF,MAAN,EAAc8B,KAAKa,GAAL,EAAd,CAAF,CAAhB,EAAD;AADL,6BAAP;AAGH,yBALM,CAAP;AAMH;;;gDAEWjD,K,EAAOS,W,EAAanB,Q,EAAU;AACtC,4BAAI4D,YAAY5D,aAAa,MAAb,IAAuBA,QAAvB,GAAkC,IAAlC,GAAyC,KAAzD;AACA,4BAAIa,SAASgD,mBAAmB1C,eAAe,EAAlC,CAAb;AACA,+BAAO,KAAKxB,UAAL,CAAgBmE,iBAAhB,CAAkC;AACrChE,iCAAQ,KAAKA,GAAb,gCAA2C8D,SAA3C,gCAA+E/C,MAD1C;AAErCK,kCAAMR,KAF+B;AAGrCqD,oCAAQ,KAH6B;AAIrCC,qCAAS,EAAE,gBAAgB,kBAAlB;AAJ4B,yBAAlC,CAAP;AAMH;;;sDAEiBC,E,EAAI;AAClB,+BAAO,KAAKtE,UAAL,CAAgBmE,iBAAhB,CAAkC;AACrChE,iCAAQ,KAAKA,GAAb,wBAAmCmE,EADE;AAErCF,oCAAQ,KAF6B;AAGrCC,qCAAS,EAAE,gBAAgB,kBAAlB;AAH4B,yBAAlC,CAAP;AAKH;;;+CAEU7C,W,EAAa;AACpB,4BAAM+C,gBAAgB,OAAtB;AACA,4BAAIC,WAAWhD,YAAYiD,KAAZ,CAAkB,GAAlB,CAAf;AACA,4BAAI7C,gBAAgB,KAApB;AACA4C,mCAAWA,SAAStD,MAAT,CAAgB,aAAK;AAC5B,gCAAIL,EAAE6D,QAAF,CAAW,WAAX,CAAJ,EAA6B;AACzB,oCAAIC,IAAIJ,cAAcK,IAAd,CAAmB/D,CAAnB,CAAR;AACA,oCAAI8D,KAAK,IAAT,EAAe;AACX,wCAAI;AACA/C,wDAAgBiD,KAAKzB,KAAL,CAAWuB,EAAE,CAAF,CAAX,CAAhB;AACH,qCAFD,CAEC,OAAMlB,GAAN,EAAW;AACR,4CAAIkB,EAAE,CAAF,MAAS,MAAb,EAAqB;AACjB/C,4DAAgB,MAAhB;AACH,yCAFD,MAEO;AACH8B,oDAAQC,KAAR,CAAc,8BAAd,EAA8CF,GAA9C;AACH;AACJ;AACJ;AACD,uCAAO,KAAP;AACH,6BAdD,MAcO;AACH,uCAAO,IAAP;AACH;AACJ,yBAlBU,CAAX;AAmBAjC,sCAAcgD,SAASM,IAAT,CAAc,GAAd,CAAd;AACAtD,sCAAcA,YAAYC,OAAZ,CAAoB,KAApB,EAA2B,EAA3B,CAAd;AACA,+BAAO,EAACD,wBAAD,EAAcI,4BAAd,EAAP;AACH;;;2DAEsBL,I,EAAMlB,Q,EAAU;AACnC,4BAAIA,aAAa,MAAjB,EAAyB;AACrB,mCAAOkB,IAAP;AACH;AACD,+BAAOA,KAAKL,MAAL,CAAY,aAAK;AACpB,gCAAI6D,EAAEC,MAAF,CAAS1B,UAAT,CAAoBjC,MAApB,KAA+B,CAAnC,EAAsC;AAClC,uCAAO,KAAP;AACH;AACD,mCAAO,IAAP;AACH,yBALM,CAAP;AAMH;;;+CAEUiB,W,EAAa;AACpB,4BAAIE,UAAW,EAAf;AADoB;AAAA;AAAA;;AAAA;AAEpB,kDAAkBO,OAAOC,IAAP,CAAYV,WAAZ,CAAlB,mIAA4C;AAAA,oCAApC2C,MAAoC;;AACxC,wCAAOA,MAAP;AACI,yCAAK,UAAL;AACIzC,gDAAQsB,IAAR,CAAa,EAAEoB,MAAMD,MAAR,EAAgB/E,MAAM,MAAtB,EAAb;AACA;AACJ;AACIsC,gDAAQsB,IAAR,CAAa,EAAEoB,MAAMD,MAAR,EAAgB/E,MAAM,QAAtB,EAAb;AALR;AAQH;AAXmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYpB,+BAAOsC,OAAP;AACH;;;uDAGkB2C,K,EAAO;AACtB,4BAAIC,GAAJ;AACA,4BAAI,OAAOD,KAAP,KAAkB,WAAlB,IAAiCA,MAAME,IAAN,GAAahE,MAAb,KAAwB,CAA7D,EAAgE;AAC5D+D,kCAAM,CAAC,GAAD,CAAN;AACH,yBAFD,MAEO;AACHA,kCAAMD,MAAME,IAAN,GAAaZ,KAAb,CAAmB,SAAnB,CAAN;AACH;AACD,+BAAOW,GAAP;AACH;;;mDAGc7D,I,EAAMS,a,EAAe;AAChC,4BAAIsD,QAAQ,CAAZ;AACA,4BAAIhD,cAAc,EAAlB;AACA,6BAAK,IAAII,IAAI,CAAb,EAAgBA,IAAInB,KAAKF,MAAzB,EAAiCqB,GAAjC,EAAsC;AAClC,iCAAK,IAAI6C,aAAa,CAAtB,EAAyBA,aAAavD,cAAcX,MAApD,EAA4DkE,YAA5D,EAA0E;AACtE,oCAAIC,gBAAgBxD,cAAcuD,UAAd,CAApB;AACA,oCAAIC,kBAAkB,GAAtB,EAA2B;AAAA;AAAA;AAAA;;AAAA;AACvB;AACA,8DAAkBzC,OAAOC,IAAP,CAAYzB,KAAKmB,CAAL,EAAQ,QAAR,CAAZ,CAAlB,mIAAkD;AAAA,gDAAzCQ,KAAyC;;AAC9C,gDAAG,EAAEA,SAASZ,WAAX,KAA2BY,UAAU,UAAxC,EAAoD;AAChDZ,4DAAYY,KAAZ,IAAqBoC,OAArB;AACH;AACJ;AANsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAOvB,8DAAuBvC,OAAOC,IAAP,CAAYzB,KAAKmB,CAAL,EAAQ,aAAR,CAAZ,CAAvB,mIAA4D;AAAA,gDAAnDkB,UAAmD;;AACxD,gDAAG,EAAEA,cAActB,WAAhB,CAAH,EAAiC;AAC7BA,4DAAYsB,UAAZ,IAA0B0B,OAA1B;AACH;AACJ;AAXsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAY1B,iCAZD,MAYO,IAAI,EAAEE,iBAAiBlD,WAAnB,CAAJ,EAAqC;AACxCA,gDAAYkD,aAAZ,IAA6BF,OAA7B;AACH;AACJ;AACJ;AACDhD,oCAAY,UAAZ,IAA0BgD,KAA1B;AACA,+BAAOhD,WAAP;AACH;;;qDAEgB;AACb,+BAAO,KAAKtC,UAAL,CAAgBmE,iBAAhB,CAAkC;AACrChE,iCAAK,KAAKA,GAAL,GAAW,gBADqB;AAErCiE,oCAAQ;AAF6B,yBAAlC,EAGJL,IAHI,CAGC,oBAAY;AAChB,gCAAI7B,SAAS8C,MAAT,KAAoB,GAAxB,EAA6B;AACzB,uCAAO,EAAEA,QAAQ,SAAV,EAAqBS,SAAS,wBAA9B,EAAwDC,OAAO,SAA/D,EAAP;AACH;AACJ,yBAPM,CAAP;AAQH;;;yDAEoB5E,O,EAAS;AAAA;;AAC1B;AACEA,gCAAQG,OAAR,GAAkBrB,EAAEsB,MAAF,CAASJ,QAAQG,OAAjB,EAA0B,kBAAU;AACtD,mCAAO0E,OAAOA,MAAP,KAAkB,eAAzB;AACD,yBAFmB,CAAlB;AAGA7E,gCAAQ8E,QAAR,GAAmBhG,EAAEwF,GAAF,CAAMtE,QAAQG,OAAd,EAAuB,kBAAU;AACpD,mCAAO;AACL0E,wCAAQ,OAAK1F,WAAL,CAAiBwB,OAAjB,CAAyBkE,OAAOA,MAAhC,CADH;AAELjE,sCAAMiE,OAAOjE,IAFR;AAGLmE,uCAAOF,OAAOE,KAHT;AAILzE,sCAAMuE,OAAOvE,IAJR;AAKLlB,sCAAMyF,OAAOzF,IAAP,IAAe,QALhB;AAML4F,8CAAcH,OAAOG,YAAP,IAAuB;AANhC,6BAAP;AAQD,yBAToB,CAAnB;AAUF,+BAAOhF,OAAP;AACD;;;uDAEgBiF,M,EAAQD,Y,EAAa;AACxC,4BAAGA,iBAAiB,EAApB,EAAuB;AACrB,mCAAOjB,KAAKmB,SAAL,CAAeD,MAAf,CAAP;AACD;AACD,4BAAIE,aAAa,sBAAjB;AACA,+BAAOH,aAAarE,OAAb,CAAqBwE,UAArB,EAAiC,UAASC,KAAT,EAAgBC,EAAhB,EAAoB;AAC1D,gCAAIJ,OAAOI,EAAP,CAAJ,EAAgB;AACd,uCAAOJ,OAAOI,EAAP,CAAP;AACD;AACD,mCAAO,EAAP;AACD,yBALM,CAAP;AAMD","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.silenced = typeof instanceSettings.jsonData.silenced !== \"undefined\" ? instanceSettings.jsonData.silenced : false;\n    this.severityLevels = {}\n    this.severityLevels[instanceSettings.jsonData.severity_critical.toLowerCase()]  = 4;\n    this.severityLevels[instanceSettings.jsonData.severity_high.toLowerCase()]      = 3;\n    this.severityLevels[instanceSettings.jsonData.severity_warning.toLowerCase()]   = 2;\n    this.severityLevels[instanceSettings.jsonData.severity_info.toLowerCase()]      = 1;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n    query(options) {\n        let query = this.buildQueryParameters(options);\n        query.targets = query.targets.filter(t => !t.hide);\n\n        if (query.targets.length <= 0) {\n            return this.q.when({data: []});\n        }\n        var queryString = this.templateSrv.replace(query.targets[0].expr, options.scopedVars);\n        var querySilenced = this.silenced;\n        if (queryString) {\n            var {queryString, querySilenced} = this.parseQuery(queryString)\n        }\n        \n        if(query.targets[0].type === \"table\"){\n            // Format data for table panel\n            return this.formatDataTable(query, queryString, querySilenced);\n        } else {\n            return this.formatDataStat(query, queryString, querySilenced);\n        }\n    }\n\n    async formatDataTable(query, queryString, silenced) {\n        let labelSelector = this.parseLabelSelector(query.targets[0].labelSelector);\n        const response = await this.makeRequest(query, queryString, silenced);\n        let results = {\n            \"data\": [{\n                \"rows\": [],\n                \"columns\": [],\n                \"type\": \"table\"\n                }\n            ]\n        };\n\n        if(response.data && response.data.data && response.data.data.length) {\n            let data = this.filterSilencedOnlyData(response.data.data, silenced)\n            let columnsDict = this.getColumnsDict(data, labelSelector);\n            results.data[0].columns = this.getColumns(columnsDict);\n\n            for (let i = 0; i < data.length; i++) {\n                let row = new Array(results.data[0].columns.length).fill(\"\");\n                let item = data[i];\n\n                for (let label of Object.keys(item['labels']).concat(Object.keys(item)).concat(Object.keys(item['status'])) ) {\n                    if(label in columnsDict) {\n                        switch(label) {\n                            case 'severity':\n                                row[columnsDict[label]] = this.severityLevels[item['labels'][label]];\n                                break;\n                            case 'startsAt':\n                                row[columnsDict[label]] = [Date.parse(item['startsAt'])];\n                                break;\n                            case 'endsAt':\n                                row[columnsDict[label]] = item['endsAt'];\n                                break;\n                            case 'silencedBy':\n                                const silencedByID = item['status']['silencedBy'][0];\n                                if (silencedByID) {\n                                    try {\n                                        const silencedBy = await this.getSilencedByUser(silencedByID);\n                                        row[columnsDict[label]] = silencedBy.data.data.createdBy;;\n                                    } catch(err) {\n                                        console.error(err)\n                                    }\n                                }\n                                break;\n                            default:\n                                row[columnsDict[label]] = item['labels'][label];\n                        }\n                    }\n                }\n                for (let annotation of Object.keys(item['annotations'])) {\n                    if(annotation in columnsDict) {\n                        row[columnsDict[annotation]] = item['annotations'][annotation];\n                    }\n                }\n                results.data[0].rows.push(row);\n            }\n        }\n        return results;\n    }\n\n    formatDataStat(query, queryString, silenced) {\n        return this.makeRequest(query, queryString, silenced).then(response => {\n            let data = this.filterSilencedOnlyData(response.data.data, silenced)\n            return {\n                \"data\": [{ \"datapoints\": [ [data.length, Date.now()] ]}]\n            }\n        });\n    }\n\n    makeRequest(query, queryString, silenced) {\n        let bSilenced = silenced === \"only\" || silenced ? true : false;\n        let filter = encodeURIComponent(queryString || \"\");\n        return this.backendSrv.datasourceRequest({\n            url: `${this.url}/api/v1/alerts?silenced=${bSilenced}&inhibited=false&filter=${filter}`,\n            data: query,\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' }\n        });\n    }\n\n    getSilencedByUser(id) {\n        return this.backendSrv.datasourceRequest({\n            url: `${this.url}/api/v1/silence/${id}`,\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' }\n        });\n    }\n\n    parseQuery(queryString) {\n        const silencedRegex = /=(.*)/;\n        let aQueries = queryString.split(\",\");\n        let querySilenced = false;\n        aQueries = aQueries.filter(q => {\n            if (q.includes(\"silenced=\")) {\n                let r = silencedRegex.exec(q);\n                if (r != null) {\n                    try {\n                        querySilenced = JSON.parse(r[1]);\n                    }catch(err) {\n                        if (r[1] === \"only\") {\n                            querySilenced = \"only\";\n                        } else {\n                            console.error(\"error casting silenced value\", err)\n                        }\n                    }\n                }\n                return false\n            } else {\n                return true\n            }\n        });\n        queryString = aQueries.join(\",\")\n        queryString = queryString.replace(/\\s/g, \"\");\n        return {queryString, querySilenced};\n    }\n\n    filterSilencedOnlyData(data, silenced) {\n        if (silenced !== \"only\") {\n            return data;\n        }\n        return data.filter(d => {\n            if (d.status.silencedBy.length === 0) {\n                return false;\n            }\n            return true;\n        });\n    }\n\n    getColumns(columnsDict) {\n        let columns =  [];\n        for(let column of Object.keys(columnsDict)) {\n            switch(column) {\n                case \"startsAt\":\n                    columns.push({ text: column, type: \"time\" });\n                    break;\n                default:\n                    columns.push({ text: column, type: \"string\" });\n            }\n            \n        }\n        return columns;\n    }\n\n    // Parses the label list into a map\n    parseLabelSelector(input) {\n        var map;\n        if (typeof(input) === \"undefined\" || input.trim().length === 0) {\n            map = [\"*\"];\n        } else {\n            map = input.trim().split(/\\s*,\\s*/);\n        }\n        return map;\n    }\n\n    // Creates a column index dictionary in to assist in data row construction\n    getColumnsDict(data, labelSelector) {\n        let index = 0;\n        let columnsDict = {};\n        for (let i = 0; i < data.length; i++) {\n            for (let labelIndex = 0; labelIndex < labelSelector.length; labelIndex++) {\n                var selectedLabel = labelSelector[labelIndex];\n                if (selectedLabel === \"*\") {\n                    // '*' maps to all labels/annotations not already added via the label selector list\n                    for (let label of Object.keys(data[i]['labels'])) {\n                        if(!(label in columnsDict) && label !== 'severity') {\n                            columnsDict[label] = index++;\n                        }\n                    }\n                    for (let annotation of Object.keys(data[i]['annotations'])) {\n                        if(!(annotation in columnsDict)) {\n                            columnsDict[annotation] = index++;\n                        }\n                    }\n                } else if (!(selectedLabel in columnsDict)) {\n                    columnsDict[selectedLabel] = index++;\n                }\n            }\n        }\n        columnsDict['severity'] = index;\n        return columnsDict;\n    }\n\n    testDatasource() {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/api/v1/status',\n            method: 'GET'\n        }).then(response => {\n            if (response.status === 200) {\n                return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n            }\n        });\n    }\n\n    buildQueryParameters(options) {\n        //remove placeholder targets\n          options.targets = _.filter(options.targets, target => {\n          return target.target !== 'select metric';\n        });\n          options.targetss = _.map(options.targets, target => {\n          return {\n            target: this.templateSrv.replace(target.target),\n            expr: target.expr,\n            refId: target.refId,\n            hide: target.hide,\n            type: target.type || 'single',\n            legendFormat: target.legendFormat || \"\"\n          };\n        });\n        return options;\n      }\n\n    formatInstanceText(labels, legendFormat){\n    if(legendFormat === \"\"){\n      return JSON.stringify(labels);\n    }\n    let aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\n    return legendFormat.replace(aliasRegex, function(match, g1) {\n      if (labels[g1]) {\n        return labels[g1];\n      }\n      return \"\";\n    });\n  }\n}\n"]}