{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","silenced","jsonData","severityLevels","severity_critical","toLowerCase","severity_high","severity_warning","severity_info","q","filters","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","results","queryPromises","forEach","queryString","replace","target","expr","scopedVars","Object","assign","parseAndFilterQuery","filterValue","push","formatDataTable","formatDataStat","alias","result","Promise","all","labelSelector","parseLabelSelector","response","makeRequest","silencedBy","filterOnlyData","columnsDict","getColumnsDict","columns","getColumns","i","row","Array","fill","item","keys","concat","label","Date","parse","silencedByID","getSilencedByUser","createdBy","err","console","error","annotation","rows","then","now","bSilenced","encodeURIComponent","datasourceRequest","method","headers","id","valueRegex","aQueries","split","includes","r","exec","value","JSON","join","d","status","annotations","column","text","input","map","trim","index","labelIndex","selectedLabel","message","title","targetss","refId","legendFormat","labels","stringify","aliasRegex","match","g1"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.silenced = typeof instanceSettings.jsonData.silenced !== \"undefined\" ? instanceSettings.jsonData.silenced : false;\n        this.severityLevels = {}\n        this.severityLevels[instanceSettings.jsonData.severity_critical.toLowerCase()]  = 4;\n        this.severityLevels[instanceSettings.jsonData.severity_high.toLowerCase()]      = 3;\n        this.severityLevels[instanceSettings.jsonData.severity_warning.toLowerCase()]   = 2;\n        this.severityLevels[instanceSettings.jsonData.severity_info.toLowerCase()]      = 1;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n\n        this.filters = {\n            \"silencedBy\": this.silenced,\n            \"acknowledgedBy\": false\n        }\n    }\n\n    async query(options) {\n        let query = this.buildQueryParameters(options);\n        query.targets = query.targets.filter(t => !t.hide);\n\n        if (query.targets.length <= 0) {\n            return this.q.when({data: []});\n        }\n        let results = {\n            \"data\": []\n        }\n        let queryPromises = [];\n\n        query.targets.forEach(target => {\n            var queryString = this.templateSrv.replace(target.expr, options.scopedVars);\n            let filters = Object.assign({}, this.filters);\n            if (queryString) {\n                for ( let filter in filters) {\n                    var {queryString, filterValue} = this.parseAndFilterQuery(queryString, filter);\n                    filters[filter] = filterValue;\n                };\n            }\n            if(target.type === \"table\"){\n                // Format data for table panel\n                queryPromises.push(this.formatDataTable(query, queryString, filters));\n            } else {\n                queryPromises.push(this.formatDataStat(query, queryString, filters, target.alias));\n            }\n        });\n        let result = await Promise.all(queryPromises);\n        results.data = result;\n        return results;\n    }\n\n    async formatDataTable(query, queryString, filters) {\n        let labelSelector = this.parseLabelSelector(query.targets[0].labelSelector);\n        const response = await this.makeRequest(query, queryString, filters.silencedBy);\n        let results = {\n            \"rows\": [],\n            \"columns\": [],\n            \"type\": \"table\"\n        };\n\n        if(response.data && response.data.data && response.data.data.length) {\n            let data = response.data.data;\n            for ( let filter in filters) {\n                data = this.filterOnlyData(data, filter, filters[filter]);\n            };\n            let columnsDict = this.getColumnsDict(data, labelSelector);\n            results.columns = this.getColumns(columnsDict);\n\n            for (let i = 0; i < data.length; i++) {\n                let row = new Array(results.columns.length).fill(\"\");\n                let item = data[i];\n\n                for (let label of Object.keys(item['labels']).concat(Object.keys(item)).concat(Object.keys(item['status'])) ) {\n                    if(label in columnsDict) {\n                        switch(label) {\n                            case 'severity':\n                                row[columnsDict[label]] = this.severityLevels[item['labels'][label]];\n                                break;\n                            case 'startsAt':\n                                row[columnsDict[label]] = [Date.parse(item['startsAt'])];\n                                break;\n                            case 'endsAt':\n                                row[columnsDict[label]] = item['endsAt'];\n                                break;\n                            case 'silencedBy':\n                                const silencedByID = item['status']['silencedBy'][0];\n                                if (silencedByID) {\n                                    try {\n                                        const silencedBy = await this.getSilencedByUser(silencedByID);\n                                        row[columnsDict[label]] = silencedBy.data.data.createdBy;\n                                    } catch(err) {\n                                        console.error(err)\n                                    }\n                                }\n                                break;\n                            default:\n                                row[columnsDict[label]] = item['labels'][label];\n                        }\n                    }\n                }\n                for (let annotation of Object.keys(item['annotations'])) {\n                    if(annotation in columnsDict) {\n                        row[columnsDict[annotation]] = item['annotations'][annotation];\n                    }\n                }\n                results.rows.push(row);\n            }\n        }\n        return results;\n    }\n\n    formatDataStat(query, queryString, filters, alias) {\n        return this.makeRequest(query, queryString, filters.silencedBy).then(response => {\n            let data = response.data.data;\n            for ( let filter in filters) {\n                data = this.filterOnlyData(data, filter, filters[filter]);\n            };\n            return {\n                \"datapoints\": [ [data.length, Date.now()] ], \"target\": alias\n            }\n        });\n    }\n\n    makeRequest(query, queryString, silenced) {\n        let bSilenced = silenced === \"only\" || silenced ? true : false;\n        let filter = encodeURIComponent(queryString || \"\");\n        return this.backendSrv.datasourceRequest({\n            url: `${this.url}/api/v1/alerts?silenced=${bSilenced}&inhibited=false&filter=${filter}`,\n            data: query,\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' }\n        });\n    }\n\n    getSilencedByUser(id) {\n        return this.backendSrv.datasourceRequest({\n            url: `${this.url}/api/v1/silence/${id}`,\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' }\n        });\n    }\n\n    parseAndFilterQuery(queryString, filter) {\n        const valueRegex = /=(.*)/;\n        let aQueries = queryString.split(\",\");\n        let filterValue = false;\n        aQueries = aQueries.filter(q => {\n            if (q.includes(filter + \"=\")) {\n                let r = valueRegex.exec(q);\n                if (r != null) {\n                    let value;\n                    try {\n                        filterValue = JSON.parse(r[1]);\n                    }catch(err) {\n                        if (r[1] === \"only\") {\n                            filterValue = \"only\";\n                        } else {\n                            console.error(\"error casting silenced value\", err)\n                        }\n                    }\n                }\n                return false\n            } else {\n                return true\n            }\n        });\n\n        queryString = aQueries.join(\",\")\n        queryString = queryString.replace(/\\s/g, \"\");\n        return {\"queryString\": queryString, \"filterValue\": filterValue};\n    }\n\n    filterOnlyData(data, filter, value) {\n        if (!value || value !== \"only\") {\n            return data;\n        }\n\n        return data.filter(d => {\n            if (d.status[filter] && d.status[filter].length > 0) {\n                return true;\n            }\n            if (d.annotations[filter] && d.annotations[filter].length > 0) {\n                return true;\n            }\n            return false;\n        });\n    }\n\n    getColumns(columnsDict) {\n        let columns =  [];\n        for(let column of Object.keys(columnsDict)) {\n            switch(column) {\n                case \"startsAt\":\n                    columns.push({ text: column, type: \"time\" });\n                    break;\n                default:\n                    columns.push({ text: column, type: \"string\" });\n            }\n            \n        }\n        return columns;\n    }\n\n    // Parses the label list into a map\n    parseLabelSelector(input) {\n        var map;\n        if (typeof(input) === \"undefined\" || input.trim().length === 0) {\n            map = [\"*\"];\n        } else {\n            map = input.trim().split(/\\s*,\\s*/);\n        }\n        return map;\n    }\n\n    // Creates a column index dictionary in to assist in data row construction\n    getColumnsDict(data, labelSelector) {\n        let index = 0;\n        let columnsDict = {};\n        for (let i = 0; i < data.length; i++) {\n            for (let labelIndex = 0; labelIndex < labelSelector.length; labelIndex++) {\n                var selectedLabel = labelSelector[labelIndex];\n                if (selectedLabel === \"*\") {\n                    // '*' maps to all labels/annotations not already added via the label selector list\n                    for (let label of Object.keys(data[i]['labels'])) {\n                        if(!(label in columnsDict) && label !== 'severity') {\n                            columnsDict[label] = index++;\n                        }\n                    }\n                    for (let annotation of Object.keys(data[i]['annotations'])) {\n                        if(!(annotation in columnsDict)) {\n                            columnsDict[annotation] = index++;\n                        }\n                    }\n                } else if (!(selectedLabel in columnsDict)) {\n                    columnsDict[selectedLabel] = index++;\n                }\n            }\n        }\n        columnsDict['severity'] = index;\n        return columnsDict;\n    }\n\n    testDatasource() {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/api/v1/status',\n            method: 'GET'\n        }).then(response => {\n            if (response.status === 200) {\n                return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n            }\n        });\n    }\n\n    buildQueryParameters(options) {\n        //remove placeholder targets\n          options.targets = _.filter(options.targets, target => {\n          return target.target !== 'select metric';\n        });\n          options.targetss = _.map(options.targets, target => {\n          return {\n            target: this.templateSrv.replace(target.target),\n            expr: target.expr,\n            refId: target.refId,\n            hide: target.hide,\n            type: target.type || 'single',\n            legendFormat: target.legendFormat || \"\"\n          };\n        });\n        return options;\n      }\n\n    formatInstanceText(labels, legendFormat){\n    if(legendFormat === \"\"){\n      return JSON.stringify(labels);\n    }\n    let aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\n    return legendFormat.replace(aliasRegex, function(match, g1) {\n      if (labels[g1]) {\n        return labels[g1];\n      }\n      return \"\";\n    });\n  }\n}\n"]}