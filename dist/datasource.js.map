{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","silenced","jsonData","severityLevels","severity_critical","toLowerCase","severity_high","severity_warning","severity_info","q","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","queryString","replace","expr","scopedVars","querySilenced","parseQuery","formatDataTable","formatDataStat","labelSelector","parseLabelSelector","makeRequest","then","results","response","filterSilencedOnlyData","columnsDict","getColumnsDict","columns","getColumns","i","row","Array","fill","item","Date","parse","Object","keys","label","annotation","rows","push","now","bSilenced","encodeURIComponent","datasourceRequest","method","headers","silencedRegex","aQueries","split","includes","r","exec","JSON","err","console","error","join","d","status","silencedBy","text","column","input","map","trim","index","labelIndex","selectedLabel","message","title","target","targetss","refId","legendFormat","labels","stringify","aliasRegex","match","g1"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.silenced = typeof instanceSettings.jsonData.silenced !== \"undefined\" ? instanceSettings.jsonData.silenced : false;\n    this.severityLevels = {}\n    this.severityLevels[instanceSettings.jsonData.severity_critical.toLowerCase()]  = 4;\n    this.severityLevels[instanceSettings.jsonData.severity_high.toLowerCase()]      = 3;\n    this.severityLevels[instanceSettings.jsonData.severity_warning.toLowerCase()]   = 2;\n    this.severityLevels[instanceSettings.jsonData.severity_info.toLowerCase()]      = 1;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n    query(options) {\n        let query = this.buildQueryParameters(options);\n        query.targets = query.targets.filter(t => !t.hide);\n\n        if (query.targets.length <= 0) {\n            return this.q.when({data: []});\n        }\n        var queryString = this.templateSrv.replace(query.targets[0].expr, options.scopedVars);\n        var querySilenced = this.silenced;\n        if (queryString) {\n            var {queryString, querySilenced} = this.parseQuery(queryString)\n        }\n        \n        if(query.targets[0].type === \"table\"){\n            // Format data for table panel\n            return this.formatDataTable(query, queryString, querySilenced);\n        } else {\n            return this.formatDataStat(query, queryString, querySilenced);\n        }\n    }\n\n    formatDataTable(query, queryString, silenced) {\n        let labelSelector = this.parseLabelSelector(query.targets[0].labelSelector);\n        return this.makeRequest(query, queryString, silenced).then(response => {\n                let results = {\n                    \"data\": [{\n                        \"rows\": [],\n                        \"columns\": [],\n                        \"type\": \"table\"\n                        }\n                    ]\n                };\n\n            if(response.data && response.data.data && response.data.data.length) {\n                let data = this.filterSilencedOnlyData(response.data.data, silenced)\n                let columnsDict = this.getColumnsDict(data, labelSelector);\n                results.data[0].columns = this.getColumns(columnsDict);\n\n                for (let i = 0; i < data.length; i++) {\n                    let row = new Array(results.data[0].columns.length).fill(\"\");\n                    let item = data[i];\n                    row[0] = [Date.parse(item['startsAt'])];\n\n                    for (let label of Object.keys(item['labels'])) {\n                        if(label in columnsDict) {\n                            if(label === 'severity') {\n                                row[columnsDict[label]] = this.severityLevels[item['labels'][label]]\n                            }\n                            else {\n                                row[columnsDict[label]] = item['labels'][label];\n                            }\n\n                        }\n                    }\n                    for (let annotation of Object.keys(item['annotations'])) {\n                        if(annotation in columnsDict) {\n                            row[columnsDict[annotation]] = item['annotations'][annotation];\n                        }\n                    }\n                    results.data[0].rows.push(row);\n                }\n            }\n            return results;\n        });\n    }\n\n    formatDataStat(query, queryString, silenced) {\n        return this.makeRequest(query, queryString, silenced).then(response => {\n            let data = this.filterSilencedOnlyData(response.data.data, silenced)\n            return {\n                \"data\": [{ \"datapoints\": [ [data.length, Date.now()] ]}]\n            }\n        });\n    }\n\n    makeRequest(query, queryString, silenced) {\n        let bSilenced = silenced === \"only\" || silenced ? true : false;\n        let filter = encodeURIComponent(queryString || \"\");\n        return this.backendSrv.datasourceRequest({\n            url: `${this.url}/api/v1/alerts?silenced=${bSilenced}&inhibited=false&filter=${filter}`,\n            data: query,\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' }\n        });\n    }\n\n    parseQuery(queryString) {\n        const silencedRegex = /=(.*)/;\n        let aQueries = queryString.split(\",\");\n        let querySilenced = false;\n        aQueries = aQueries.filter(q => {\n            if (q.includes(\"silenced=\")) {\n                let r = silencedRegex.exec(q);\n                if (r != null) {\n                    try {\n                        querySilenced = JSON.parse(r[1]);\n                    }catch(err) {\n                        if (r[1] === \"only\") {\n                            querySilenced = \"only\";\n                        } else {\n                            console.error(\"error casting silenced value\", err)\n                        }\n                    }\n                }\n                return false\n            } else {\n                return true\n            }\n        });\n        queryString = aQueries.join(\",\")\n        queryString = queryString.replace(/\\s/g, \"\");\n        return {queryString, querySilenced};\n    }\n\n    filterSilencedOnlyData(data, silenced) {\n        if (silenced !== \"only\") {\n            return data;\n        }\n        return data.filter(d => {\n            if (d.status.silencedBy.length === 0) {\n                return false;\n            }\n            return true;\n        });\n    }\n\n    getColumns(columnsDict) {\n        let columns =  [{ text: \"Time\", type: \"time\" }];\n        for(let column of Object.keys(columnsDict)) {\n            columns.push({ text: column, type: \"string\" })\n        }\n        return columns;\n    }\n\n    // Parses the label list into a map\n    parseLabelSelector(input) {\n        var map;\n        if (typeof(input) === \"undefined\" || input.trim().length === 0) {\n            map = [\"*\"];\n        } else {\n            map = input.trim().split(/\\s*,\\s*/);\n        }\n        return map;\n    }\n\n    // Creates a column index dictionary in to assist in data row construction\n    getColumnsDict(data, labelSelector) {\n        let index = 1; // 0 is the data column\n        let columnsDict = {};\n        for (let i = 0; i < data.length; i++) {\n            for (let labelIndex = 0; labelIndex < labelSelector.length; labelIndex++) {\n                var selectedLabel = labelSelector[labelIndex];\n                if (selectedLabel === \"*\") {\n                    // '*' maps to all labels/annotations not already added via the label selector list\n                    for (let label of Object.keys(data[i]['labels'])) {\n                        if(!(label in columnsDict) && label !== 'severity') {\n                            columnsDict[label] = index++;\n                        }\n                    }\n                    for (let annotation of Object.keys(data[i]['annotations'])) {\n                        if(!(annotation in columnsDict)) {\n                            columnsDict[annotation] = index++;\n                        }\n                    }\n                } else if (!(selectedLabel in columnsDict)) {\n                    columnsDict[selectedLabel] = index++;\n                }\n            }\n        }\n        columnsDict['severity'] = index;\n        return columnsDict;\n    }\n\n    testDatasource() {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/api/v1/status',\n            method: 'GET'\n        }).then(response => {\n            if (response.status === 200) {\n                return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n            }\n        });\n    }\n\n    buildQueryParameters(options) {\n        //remove placeholder targets\n          options.targets = _.filter(options.targets, target => {\n          return target.target !== 'select metric';\n        });\n          options.targetss = _.map(options.targets, target => {\n          return {\n            target: this.templateSrv.replace(target.target),\n            expr: target.expr,\n            refId: target.refId,\n            hide: target.hide,\n            type: target.type || 'single',\n            legendFormat: target.legendFormat || \"\"\n          };\n        });\n        return options;\n      }\n\n    formatInstanceText(labels, legendFormat){\n    if(legendFormat === \"\"){\n      return JSON.stringify(labels);\n    }\n    let aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\n    return legendFormat.replace(aliasRegex, function(match, g1) {\n      if (labels[g1]) {\n        return labels[g1];\n      }\n      return \"\";\n    });\n  }\n}\n"]}