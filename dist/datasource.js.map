{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","silenced","jsonData","severityLevels","severity_critical","toLowerCase","severity_high","severity_warning","severity_info","q","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","labelSelector","parseLabelSelector","queryString","replace","expr","scopedVars","parseQuery","encodeURIComponent","datasourceRequest","method","headers","then","results","response","columnsDict","getColumnsDict","columns","getColumns","i","row","Array","fill","item","Date","parse","Object","keys","label","annotation","rows","push","filterSilencedOnlyData","now","silencedRegex","aQueries","split","includes","r","exec","bSilenced","JSON","err","console","error","join","d","status","silencedBy","text","column","input","map","trim","index","labelIndex","selectedLabel","message","title","target","targetss","refId","legendFormat","labels","stringify","aliasRegex","match","g1"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.silenced = typeof instanceSettings.jsonData.silenced !== \"undefined\" ? instanceSettings.jsonData.silenced : false;\n    this.severityLevels = {}\n    this.severityLevels[instanceSettings.jsonData.severity_critical.toLowerCase()]  = 4;\n    this.severityLevels[instanceSettings.jsonData.severity_high.toLowerCase()]      = 3;\n    this.severityLevels[instanceSettings.jsonData.severity_warning.toLowerCase()]   = 2;\n    this.severityLevels[instanceSettings.jsonData.severity_info.toLowerCase()]      = 1;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n    query(options) {\n        let query = this.buildQueryParameters(options);\n        query.targets = query.targets.filter(t => !t.hide);\n\n        if (query.targets.length <= 0) {\n            return this.q.when({data: []});\n        }\n        // Format data for table panel\n        if(query.targets[0].type === \"table\"){\n            var labelSelector = this.parseLabelSelector(query.targets[0].labelSelector);\n\n            let queryString = this.templateSrv.replace(query.targets[0].expr, options.scopedVars);\n            if (queryString) {\n                queryString = this.parseQuery(queryString)\n            }\n            let filter = encodeURIComponent(queryString || \"\");\n            return this.backendSrv.datasourceRequest({\n                    url: `${this.url}/api/v1/alerts?silenced=${this.silenced}&inhibited=false&filter=${filter}`,\n                    data: query,\n                    method: 'GET',\n                    headers: { 'Content-Type': 'application/json' }\n                }).then(response => {\n                    let results = {\n                        \"data\": [{\n                            \"rows\": [],\n                            \"columns\": [],\n                            \"type\": \"table\"\n                            }\n                        ]\n                    };\n\n                if(response.data && response.data.data && response.data.data.length) {\n                    let columnsDict = this.getColumnsDict(response.data.data, labelSelector);\n                    results.data[0].columns = this.getColumns(columnsDict);\n\n                    for (let i = 0; i < response.data.data.length; i++) {\n                        let row = new Array(results.data[0].columns.length).fill(\"\");\n                        let item = response.data.data[i];\n                        row[0] = [Date.parse(item['startsAt'])];\n\n                        for (let label of Object.keys(item['labels'])) {\n                            if(label in columnsDict) {\n                                if(label === 'severity') {\n                                    row[columnsDict[label]] = this.severityLevels[item['labels'][label]]\n                                }\n                                else {\n                                    row[columnsDict[label]] = item['labels'][label];\n                                }\n\n                            }\n                        }\n                        for (let annotation of Object.keys(item['annotations'])) {\n                            if(annotation in columnsDict) {\n                                row[columnsDict[annotation]] = item['annotations'][annotation];\n                            }\n                        }\n                        results.data[0].rows.push(row);\n                    }\n                }\n                return results;\n            });\n        } else {\n            let queryString = this.templateSrv.replace(query.targets[0].expr, options.scopedVars);\n            if (queryString) {\n                queryString = this.parseQuery(queryString)\n            }\n            let filter = encodeURIComponent(queryString || \"\");\n            let silenced = this.silenced === \"only\" || this.silenced ? true : false;\n            return this.backendSrv.datasourceRequest({\n                url: `${this.url}/api/v1/alerts?silenced=${silenced}&inhibited=false&filter=${filter}`,\n                data: query,\n                method: 'GET',\n                headers: { 'Content-Type': 'application/json' }\n            }).then(response => {\n                let data = this.filterSilencedOnlyData(response.data.data, this.silenced)\n                return {\n                    \"data\": [{ \"datapoints\": [ [data.length, Date.now()] ]}]\n                }\n            });\n        }\n    }\n\n    parseQuery(queryString) {\n        const silencedRegex = /=(.*)/;\n        let aQueries = queryString.split(\",\");\n        this.silenced = false;\n        aQueries = aQueries.filter(q => {\n            if (q.includes(\"silenced=\")) {\n                let r = silencedRegex.exec(q);\n                if (r != null) {\n                    let bSilenced = false;\n                    try {\n                        bSilenced = JSON.parse(r[1]);\n                    }catch(err) {\n                        if (r[1] === \"only\") {\n                            bSilenced = \"only\";\n                        } else {\n                            console.error(\"error casting silenced value\", err)\n                        }\n                    }\n                    this.silenced = bSilenced;\n                }\n                return false\n            } else {\n                return true\n            }\n        });\n        queryString = aQueries.join(\",\")\n        queryString = queryString.replace(/\\s/g, \"\");\n        return queryString;\n    }\n\n    filterSilencedOnlyData(data, silenced) {\n        if (silenced !== \"only\") {\n            return data;\n        }\n        return data.filter(d => {\n            if (d.status.silencedBy.length === 0) {\n                return false;\n            }\n        });\n    }\n\n    getColumns(columnsDict) {\n        let columns =  [{ text: \"Time\", type: \"time\" }];\n        for(let column of Object.keys(columnsDict)) {\n            columns.push({ text: column, type: \"string\" })\n        }\n        return columns;\n    }\n\n    // Parses the label list into a map\n    parseLabelSelector(input) {\n        var map;\n        if (typeof(input) === \"undefined\" || input.trim().length === 0) {\n            map = [\"*\"];\n        } else {\n            map = input.trim().split(/\\s*,\\s*/);\n        }\n        return map;\n    }\n\n    // Creates a column index dictionary in to assist in data row construction\n    getColumnsDict(data, labelSelector) {\n        let index = 1; // 0 is the data column\n        let columnsDict = {};\n        for (let i = 0; i < data.length; i++) {\n            for (let labelIndex = 0; labelIndex < labelSelector.length; labelIndex++) {\n                var selectedLabel = labelSelector[labelIndex];\n                if (selectedLabel === \"*\") {\n                    // '*' maps to all labels/annotations not already added via the label selector list\n                    for (let label of Object.keys(data[i]['labels'])) {\n                        if(!(label in columnsDict) && label !== 'severity') {\n                            columnsDict[label] = index++;\n                        }\n                    }\n                    for (let annotation of Object.keys(data[i]['annotations'])) {\n                        if(!(annotation in columnsDict)) {\n                            columnsDict[annotation] = index++;\n                        }\n                    }\n                } else if (!(selectedLabel in columnsDict)) {\n                    columnsDict[selectedLabel] = index++;\n                }\n            }\n        }\n        columnsDict['severity'] = index;\n        return columnsDict;\n    }\n\n    testDatasource() {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/api/v1/status',\n            method: 'GET'\n        }).then(response => {\n            if (response.status === 200) {\n                return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n            }\n        });\n    }\n\n    buildQueryParameters(options) {\n        //remove placeholder targets\n          options.targets = _.filter(options.targets, target => {\n          return target.target !== 'select metric';\n        });\n          options.targetss = _.map(options.targets, target => {\n          return {\n            target: this.templateSrv.replace(target.target),\n            expr: target.expr,\n            refId: target.refId,\n            hide: target.hide,\n            type: target.type || 'single',\n            legendFormat: target.legendFormat || \"\"\n          };\n        });\n        return options;\n      }\n\n    formatInstanceText(labels, legendFormat){\n    if(legendFormat === \"\"){\n      return JSON.stringify(labels);\n    }\n    let aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\n    return legendFormat.replace(aliasRegex, function(match, g1) {\n      if (labels[g1]) {\n        return labels[g1];\n      }\n      return \"\";\n    });\n  }\n}\n"]}